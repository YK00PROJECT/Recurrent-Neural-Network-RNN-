# -*- coding: utf-8 -*-
"""RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OWW3SpENNsYdv3bjRaF3xtlvujNKpelq

# Building a RNN for Stock Trend Prediction

Data Preprocessing
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

train_data = pd.read_csv("Google_Stock_Price_Train.csv")
train_set = train_data.iloc[:,1:2].values

display(train_data.head())

"""Feature Scaling

Standardisation (x-mean(x))/std(x)

Normalisation = x-min(x)/max(x) - min(x)
"""

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range=(0,1))
scaled_set = sc.fit_transform(train_set)

"""Setting Up Timesteps Value"""

xtrain = []
ytrain = []
for i in range(60, 1258):
  xtrain.append(scaled_set[i-60:i,0])
  ytrain.append(scaled_set[i,0])

xtrain, ytrain = np.array(xtrain),np.array(ytrain)

"""To add new dimension to numpy array, one can use reshape, this has been done to add new dimensions to the data for identifying more correlations between other indicators in the data."""

xtrain = np.reshape(xtrain, (xtrain.shape[0], xtrain.shape[1], 1))

"""RNN Build Up"""

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

regss = Sequential()
regss.add(LSTM(units = 50, return_sequences= True, input_shape = ( xtrain.shape[1], 1)))
regss.add(Dropout(rate = 0.2))
regss.add(LSTM(units = 50, return_sequences=True))
regss.add(Dropout(rate= 0.2))
regss.add(LSTM(units = 50, return_sequences=True))
regss.add(Dropout(rate= 0.2))
regss.add(LSTM(units = 50))
regss.add(Dropout(rate= 0.2))
regss.add(Dense(units = 1))

regss.compile(optimizer="adam",loss = "mean_squared_error")

regss.fit(xtrain, ytrain, epochs = 100, batch_size = 32)

data_test_set = pd.read_csv("Google_Stock_Price_Test.csv")
real_set = data_test_set.iloc[:,1:2].values

dataset_total = pd.concat((train_data["Open"],data_test_set["Open"]), axis = 0)
inputs = dataset_total[len(dataset_total)-len(data_test_set) - 60: ].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)

xtest = []

for i in range(60, 80):
  xtest.append(inputs[i-60:i,0])


xtest = np.array(xtest)

xtest = np.reshape(xtest, (xtest.shape[0], xtest.shape[1], 1))

stock_prediction = regss.predict(xtest)
stock_prediction = sc.inverse_transform(stock_prediction)

display(stock_prediction)

"""Visualization"""

plt.plot(real_set, color = "red", label = "Real Stock Price")
plt.plot(stock_prediction, color = "blue",label = "Predicted Stock Price")
plt.title("Stock Price Prediction")
plt.xlabel("Time")
plt.ylabel("stock Price")
plt.legend()
plt.show()

